name: Push Notifications

# Configuration
# BATCH_SIZE: Number of users to process in each batch (default: 50)
#   - Increase to process more users per batch if notifications are sending quickly
#   - Decrease if you see timeouts or errors
#   - Remember edge function has 60s timeout limit
#
# CONCURRENT_NOTIFICATIONS: Number of notifications to send in parallel within each batch (default: 10)
#   - Increase for faster processing if Firebase can handle the load
#   - Decrease if you see rate limiting or errors from Firebase
#   - Keep significantly lower than BATCH_SIZE
#
# BATCH_DELAY: Delay in seconds between processing batches (default: 2)
#   - Increase if you see rate limiting or system stress
#   - Decrease for faster overall processing if system can handle it

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

env:
  BATCH_SIZE: 50
  CONCURRENT_NOTIFICATIONS: 10
  BATCH_DELAY: 2

jobs:
  trigger-push-notifications:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Get eligible users
        id: get-users
        run: |
          # Get users eligible for notifications
          response=$(curl --request GET \
            --url 'https://ztsbrysfvmmlxtzoyvle.supabase.co/functions/v1/users' \
            --header 'Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
            --silent)
          
          # Check for errors
          if echo "$response" | jq -e 'has("error")' > /dev/null; then
            echo "Error getting users: $(echo "$response" | jq -r '.error')"
            echo "Details: $(echo "$response" | jq -r '.details // "No details provided"')"
            exit 1
          fi
          
          # Store users for next step
          echo "$response" > eligible_users.json
          echo "Found $(echo "$response" | jq '. | length') eligible users"

      - name: Process users
        if: success()
        run: |
          # Process users in configurable batches
          cat eligible_users.json | \
          jq -c ". | _nwise($BATCH_SIZE)" | while read -r batch; do
            echo "Processing batch of users..."
            
            # Process users in batch with configured concurrency
            echo "$batch" | jq -c '.[]' | parallel -j "$CONCURRENT_NOTIFICATIONS" "
              user_data='{}'
              user_id=\$(echo \$user_data | jq -r '.userId')
              window_type=\$(echo \$user_data | jq -r '.windowType')
              echo \"Processing user \$user_id for window \$window_type\"
              
              response=\$(curl --request POST \
                --url 'https://ztsbrysfvmmlxtzoyvle.supabase.co/functions/v1/push-notifications' \
                --header 'Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
                --header 'Content-Type: application/json' \
                --data \"{\\\"userId\\\": \\\"\$user_id\\\", \\\"windowType\\\": \\\"\$window_type\\\"}\" \
                --silent)
              
              # Check for errors in push notification
              if echo \"\$response\" | jq -e 'has(\"error\")' > /dev/null; then
                echo \"Error processing user \$user_id: \$(echo \"\$response\" | jq -r '.error')\"
              fi
            "
            
            # Configurable delay between batches
            sleep "$BATCH_DELAY"
          done

      - name: Report completion
        if: success()
        run: echo "Push notification processing completed successfully"