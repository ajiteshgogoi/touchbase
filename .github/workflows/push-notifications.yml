name: Push Notifications

# Add concurrency control with separate groups for regular and retry runs
concurrency:
  group: push-notifications-${{ github.event.schedule == '*/5 * * * *' && 'retry' || 'regular' }}
  cancel-in-progress: false

# Configuration:
#
# Execution Schedule:
# - Regular runs: Every 30 minutes for all eligible users
# - Retry runs:   Every 5 minutes for failed notifications only
#
# Batch Processing:
# BATCH_SIZE: Users per batch (default: 50)
#   - Increase if notifications are sending quickly
#   - Decrease if seeing timeouts/errors
#   - Edge function has 60s timeout limit
#
# CONCURRENT_NOTIFICATIONS: Parallel notifications per batch (default: 10)
#   - Increase if Firebase can handle more load
#   - Decrease if seeing rate limiting
#   - Keep lower than BATCH_SIZE
#
# Delays:
# BATCH_DELAY: Regular batch delay (default: 2s)
# RETRY_BATCH_DELAY: Retry batch delay (default: 1s)
#   - Shorter for retries to process failures faster
#   - Adjust based on system load
#
# Concurrency:
# - Regular and retry runs use separate concurrency groups
# - Won't block or interfere with each other
# - Each maintains their own queue

on:
  schedule:
    # Regular check every 30 minutes
    - cron: '*/30 * * * *'
    # Retry check every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

# Security controls
permissions:
  contents: read

env:
  BATCH_SIZE: 50
  CONCURRENT_NOTIFICATIONS: 10
  BATCH_DELAY: 2
  # Shorter delay for retry batches
  RETRY_BATCH_DELAY: 1
  # Flag to identify retry runs (every 5 minutes)
  IS_RETRY_RUN: ${{ github.event.schedule == '*/5 * * * *' }}
  # Base URL for Supabase API calls
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}

jobs:
  verify-security:
    runs-on: ubuntu-latest
    steps:
      - name: Repository check
        if: github.repository != 'ajiteshgogoi/touchbase'
        run: |
          echo "This workflow can only run in ajiteshgogoi/touchbase repository"
          exit 1

      - name: Fork check
        if: github.event_name == 'workflow_dispatch' && github.repository_owner != 'ajiteshgogoi'
        run: |
          echo "Manual workflow execution is only allowed by repository owner ajiteshgogoi"
          exit 1

  process-notifications:
    needs: verify-security
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Add run type to job name for better visibility
    name: ${{ github.event.schedule == '*/5 * * * *' && 'Process Retry Notifications' || 'Process Regular Notifications' }}
    env:
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    
    steps:
      # Step 1: Setup required tools and initialize batch processing
      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y parallel jq curl

      # Generate a unique batch ID for this workflow run
      # This will be used to track all notifications sent in this run
      - name: Generate batch ID
        id: batch
        run: |
          batch_id=$(uuidgen)
          echo "BATCH_ID=$batch_id" >> $GITHUB_ENV
          echo "batch_id=$batch_id" >> $GITHUB_OUTPUT
          echo "Generated batch ID: $batch_id"

      # Initialize batch processing variables
      - name: Initialize batch processing
        id: init
        run: |
          echo "total_processed=0" >> $GITHUB_ENV
          echo "page=0" >> $GITHUB_ENV
          echo "has_more=true" >> $GITHUB_ENV

      # Step 2: Fetch eligible users for current batch
      - name: Fetch eligible users batch
        id: fetch-users
        run: |
          while [ "$has_more" = true ]; do
            echo "::group::Fetching batch page $page"
            
            # Add retry parameter for retry runs
            response=$(curl --request POST \
              --url "$SUPABASE_URL/functions/v1/users" \
              --header "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              --header 'Content-Type: application/json' \
              --data "{\"page\": $page, \"batchId\": \"$BATCH_ID\", \"isRetry\": $IS_RETRY_RUN}" \
              --silent)
            
            if ! echo "$response" | jq -e 'type == "object" and (.data != null and .hasMore != null)' > /dev/null; then
              echo "::error::Invalid response format"
              echo "Error: $(echo "$response" | jq -r '.error // "Unknown error"')"
              echo "Details: $(echo "$response" | jq -r '.details // "No details provided"')"
              exit 1
            fi

            echo "$response" | jq -r '.data' > "batch_$page.json"
            has_more=$(echo "$response" | jq -r '.hasMore')
            batch_size=$(echo "$response" | jq -r '.data | length')

            if [ "$batch_size" -eq 0 ]; then
              echo "No eligible users in this batch"
              break
            fi

            echo "Found $batch_size eligible users in batch $page"
            echo "::endgroup::"

            echo "batch_file=batch_$page.json" >> $GITHUB_OUTPUT
            echo "batch_size=$batch_size" >> $GITHUB_OUTPUT
            break
          done

      # Step 3: Process notifications for current batch
      - name: Process notifications batch
        if: steps.fetch-users.outputs.batch_size > 0
        run: |
          echo "::group::Processing batch $page notifications"
          batch_file="${{ steps.fetch-users.outputs.batch_file }}"
          
          cat "$batch_file" | jq -c '.[]' | while read -r user; do
            user_id=$(echo "$user" | jq -r '.userId')
            window_type=$(echo "$user" | jq -r '.windowType')
            
            if [ -z "$user_id" ] || [ -z "$window_type" ]; then
              echo "::warning::Skipping invalid user data: $user"
              continue
            fi

            (
              echo "Processing user $user_id for window $window_type"
              response=$(curl --request POST \
                --url "$SUPABASE_URL/functions/v1/push-notifications" \
                --header "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
                --header "Content-Type: application/json" \
                --data "{\"userId\": \"$user_id\", \"windowType\": \"$window_type\", \"batchId\": \"$BATCH_ID\"}" \
                --silent)

              if ! echo "$response" | jq -e 'type == "object" and (.message != null or .error != null)' > /dev/null; then
                echo "::warning::Invalid response format for user $user_id"
              elif echo "$response" | jq -e '.error' > /dev/null; then
                echo "::error::Failed to process user $user_id: $(echo "$response" | jq -r '.error')"
              else
                echo "Successfully processed user $user_id"
              fi
            ) &

            while [ $(jobs -r | wc -l) -ge "$CONCURRENT_NOTIFICATIONS" ]; do
              sleep 0.1
            done
          done

          wait
          echo "::endgroup::"

      # Step 4: Update progress and prepare for next batch
      - name: Update batch progress
        if: steps.fetch-users.outputs.batch_size > 0
        run: |
          total_processed=$((total_processed + ${{ steps.fetch-users.outputs.batch_size }}))
          page=$((page + 1))
          
          echo "total_processed=$total_processed" >> $GITHUB_ENV
          echo "page=$page" >> $GITHUB_ENV
          
          rm "${{ steps.fetch-users.outputs.batch_file }}"
          
          if [ "$has_more" = true ]; then
            # Use shorter delay for retry runs
            if [ "$IS_RETRY_RUN" = true ]; then
              echo "Waiting $RETRY_BATCH_DELAY seconds before next retry batch..."
              sleep "$RETRY_BATCH_DELAY"
            else
              echo "Waiting $BATCH_DELAY seconds before next batch..."
              sleep "$BATCH_DELAY"
            fi
          fi

      # Step 5: Report completion
      - name: Report completion
        run: |
          echo "::group::Notification Processing Summary"
          echo "Run type: ${{ github.event.schedule == '*/5 * * * *' && 'RETRY' || 'REGULAR' }}"
          echo "Batch ID: $BATCH_ID"
          echo "Total users processed: $total_processed"
          echo "Total batches: $page"
          echo "Batch delay: ${{ github.event.schedule == '*/5 * * * *' && env.RETRY_BATCH_DELAY || env.BATCH_DELAY }}s"
          echo "::endgroup::"
          
          if [ "$total_processed" -eq 0 ]; then
            echo "::notice::No notifications were sent - no eligible users found for ${{ github.event.schedule == '*/5 * * * *' && 'retry run' || 'regular run' }}"
          else
            if [ "$IS_RETRY_RUN" = true ]; then
              echo "::notice::Successfully processed $total_processed retry notifications across $page batches"
            else
              echo "::notice::Successfully processed $total_processed regular notifications across $page batches"
            fi
          fi