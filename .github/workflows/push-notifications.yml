name: Push Notifications

# Configuration
# BATCH_SIZE: Number of users to process in each batch (default: 50)
#   - Increase to process more users per batch if notifications are sending quickly
#   - Decrease if you see timeouts or errors
#   - Remember edge function has 60s timeout limit
#
# CONCURRENT_NOTIFICATIONS: Number of notifications to send in parallel within each batch (default: 10)
#   - Increase for faster processing if Firebase can handle the load
#   - Decrease if you see rate limiting or errors from Firebase
#   - Keep significantly lower than BATCH_SIZE
#
# BATCH_DELAY: Delay in seconds between processing batches (default: 2)
#   - Increase if you see rate limiting or system stress
#   - Decrease for faster overall processing if system can handle it

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

env:
  BATCH_SIZE: 50
  CONCURRENT_NOTIFICATIONS: 10
  BATCH_DELAY: 2

jobs:
  trigger-push-notifications:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Install GNU parallel
        run: sudo apt-get install -y parallel

      - name: Get eligible users
        id: get-users
        run: |
          # Get users eligible for notifications
          response=$(curl --request GET \
            --url 'https://ztsbrysfvmmlxtzoyvle.supabase.co/functions/v1/users' \
            --header 'Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}' \
            --silent)
          
          # Check response type
          if ! echo "$response" | jq -e 'type == "array"' > /dev/null; then
            error_msg=$(echo "$response" | jq -r '.error // "Unknown error"')
            echo "Error getting users: $error_msg"
            echo "Details: $(echo "$response" | jq -r '.details // "No details provided"')"
            exit 1
          fi
          
          # Store users for next step
          echo "$response" > eligible_users.json
          total=$(echo "$response" | jq '. | length')
          echo "Found $total eligible users"

      - name: Process users in batches
        if: success()
        run: |
          total=$(cat eligible_users.json | jq '. | length')
          if [ "$total" -eq 0 ]; then
            echo "No eligible users found, skipping processing"
            exit 0
          fi

          total_processed=0
          batch_num=1
          
          # Process users in configurable batches
          cat eligible_users.json | \
          jq -c ". | _nwise($BATCH_SIZE)" | while read -r batch; do
            batch_size=$(echo "$batch" | jq '. | length')
            echo "Processing batch $batch_num ($batch_size users)..."
            
            # Process users in batch with configured concurrency
            echo "$batch" | jq -c '.[]' | parallel --jobs "$CONCURRENT_NOTIFICATIONS" '
              user=$(echo "{}")
              user_id=$(echo "$user" | jq -r ".userId")
              window_type=$(echo "$user" | jq -r ".windowType")
              
              echo "Processing user $user_id for window $window_type"
              response=$(curl --request POST \
                --url "https://ztsbrysfvmmlxtzoyvle.supabase.co/functions/v1/push-notifications" \
                --header "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
                --header "Content-Type: application/json" \
                --data "{\"userId\": \"$user_id\", \"windowType\": \"$window_type\"}" \
                --silent)

              # Check response type
              if ! echo "$response" | jq -e "type == \"object\" and (.message != null or .error != null)" > /dev/null; then
                echo "Invalid response format for user $user_id"
              elif echo "$response" | jq -e ".error" > /dev/null; then
                echo "Error processing user $user_id: $(echo "$response" | jq -r ".error")"
              fi
            '
            
            # Update counters
            total_processed=$((total_processed + batch_size))
            batch_num=$((batch_num + 1))
            echo "Completed batch. Total processed: $total_processed"
            
            # Configurable delay between batches
            if [ "$total_processed" -lt "$total" ]; then
              echo "Waiting $BATCH_DELAY seconds before next batch..."
              sleep "$BATCH_DELAY"
            fi
          done

      - name: Report completion
        if: success()
        run: echo "Push notification processing completed successfully"